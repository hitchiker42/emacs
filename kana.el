#!/usr/bin/emacs --script 
;; -*- lexical-binding: t; -*-
(require 'cl)
(defvar kana-table (make-hash-table :test #'equal))
(setq kana-array (make-vector 142 ""))
(eval `(or ,@(mapcar (lambda (x) `(equal ,x "-scriptload")) '("emacs" "-scriptload" "kana.el"))))
(defvar kana-consonants '("" "k" "s" "t" "n" "h" "m" "y" "r" "w"))
(defvar kana-consonants-arr ["" "k" "s" "t" "n" "h" "m" "y" "r" "w"])
(defvar kana-dakuten '("" "g" "z" "d" "" "b" "" "" "" ""))
(defvar kana-dakuten-arr ["" "g" "z" "d" "" "b" "" "" "" ""])
(defvar kana-handakuten '("" "" "" "" "" "p" "" "" "" ""))
(defvar kana-handakuten-arr ["" "" "" "" "" "p" "" "" "" ""])
(defvar kana-vowels '("a" "i" "u" "e" "o"))
(defvar kana-vowels-arr ["a" "i" "u" "e" "o"])
(defvar kana-extra '("わ" "ワ" "ヲ" "を" "ん" "ン"))
(defvar kana-special (list (list (cons "し" "shi") (cons "シ" "shi"))
                           (list (cons "さ" "chi") (cons "サ" "chi"))
                           (list (cons "つ" "tsu") (cons "ツ" "tsu"))
                           (list (cons "ふ" "fu") (cons "フ" "fu"))
                           (list (cons "わ" "wa") (cons "ワ" "wa"))
                           (list (cons "ヲ" "wo") (cons "を" "wo"))
                           (list (cons "ん" "n") (cons "ン" "n"))))
(defvar script? 
  (eval `(or ,@(mapcar (lambda (x) `(equal ,x "-scriptload"))
                       command-line-args))))
(defun 2+ (x) (1+ (1+ x)));I wonder if this is faster than (+ 2 x)...
(defmacro kana-roman (j k)  `(concat (aref kana-consonants-arr ,j)
                                     (aref kana-vowels-arr ,k)))
(defmacro kana-roman-2 (j k) `(concat (aref kana-dakuten-arr ,j)
                                      (aref kana-vowels-arr ,k)))
(defmacro kana-roman-3 (j k) `(concat (aref kana-handakuten-arr ,j)
                                      (aref kana-vowels-arr ,k)))
(defmacro do-vowels ()
  `(progn
     (dotimes (k 5)
       (aset kana-array (incf l) (char-to-string i))
       (puthash (char-to-string i) (kana-roman j k) kana-table)
       (aset kana-array (incf l) (char-to-string (+ #x60 i)))
       (puthash (char-to-string (+ i #x60)) (kana-roman j k) kana-table)
       (incf i 2))
     (setq i #x304b)))
(defmacro do-vowels-y ()
  `(progn
     (incf i)
     (dotimes (k 3)
       (aset kana-array (incf l) (char-to-string i))
       (puthash (char-to-string i) (kana-roman j (* 2 k)) kana-table)
       (aset kana-array (incf l) (char-to-string (+ #x60 i)))
       (puthash (char-to-string (+ i #x60)) (kana-roman j (* 2 k)) kana-table)
       (incf i 2))
     (setq i #x3089)))
(defmacro do-consonants-1 ()
  `(dotimes (k 5)
     (aset kana-array (incf l) (char-to-string i))
     (puthash (char-to-string i) (kana-roman j k) kana-table)
     (aset kana-array (incf l) (char-to-string (+ #x60 i)))
     (puthash (char-to-string (+ i #x60)) (kana-roman j k) kana-table)
     (incf i)))
(defmacro do-consonants-2 ()
  `(dotimes (k 5)
     (if (eq i #x3063) (incf i))
     (aset kana-array (incf l) (char-to-string i))
     (puthash (char-to-string i) (kana-roman j k) kana-table)
     (aset kana-array (incf l) (char-to-string (1+ i)))
     (puthash (char-to-string (1+ i)) (kana-roman-2 j k) kana-table)
     (aset kana-array (incf l) (char-to-string (+ #x60 i)))
     (puthash (char-to-string (+ i #x60)) (kana-roman j k) kana-table)
     (aset kana-array (incf l) (char-to-string (1+ (+ #x60 i))))
     (puthash (char-to-string (1+ (+ i #x60))) (kana-roman-2 j k) kana-table)
     (incf i 2)))
(defmacro do-consonants-3 ()
  `(dotimes (k 5)
     (aset kana-array (incf l) (char-to-string i))
     (puthash (char-to-string i) (kana-roman j k) kana-table)
     (aset kana-array (incf l) (char-to-string (1+ i)))
     (puthash (char-to-string (1+ i)) (kana-roman-2 j k) kana-table)
     (aset kana-array (incf l) (char-to-string (2+ i)))
     (puthash (char-to-string (2+ i)) (kana-roman-3 j k) kana-table)
     (aset kana-array (incf l) (char-to-string (+ #x60 i)))
     (puthash (char-to-string (+ i #x60)) (kana-roman j k) kana-table)
     (aset kana-array (incf l) (char-to-string (1+ (+ #x60 i))))
     (puthash (char-to-string (1+ (+ i #x60))) (kana-roman-2 j k) kana-table)
     (aset kana-array (incf l) (char-to-string (2+ (+ #x60 i))))
     (puthash (char-to-string (2+ (+ i #x60))) (kana-roman-3 j k) kana-table)
     (incf i 3)))
(defun populate-kana-table ()
  (let ((i #x3042) (j 0) (l -1))
    (while (< i #x308d)
      (pcase i
        (#x3042 (do-vowels) (incf j))
        ((or #x306a #x307e #x3089) (do-consonants-1) (incf j))
        ((or #x304b #x3055 #x305f) (do-consonants-2) (incf j))
        (#x306f (do-consonants-3) (incf j))
        (#x3083 (do-vowels-y) (incf j))
        (_ (incf i))))
    (dolist (kana kana-extra)
      (aset kana-array (incf l) kana))
    (dolist (kana kana-special)
      (dolist (k kana) (puthash (car k) (cdr k) kana-table)))))
(defun multibyte-string-codepoint (str)
  (condition-case
      (let ((codepoint
             (eval (read
                    (replace-regexp-in-string "\\([^\\n]+\\)" "?\\1" str)))))
        (if (numberp codepoint)
            codepoint
          0))
      (error 0)))
(defun kana-test-simple ()
  (populate-kana-table)
  (random t)
  (setq batch-mode (or (null (current-buffer)) script?))
  (let ((current-kana "")
        (current-answer "")
        (current-guess "")
        (current-guess-number 0)
        (*output* (if batch-mode t (current-buffer)))
        (*read-fun* (lambda () (read-from-minibuffer "Guess:"))))
    (unwind-protect
        (while t
          (setq current-kana (aref kana-array (random 142)))
          (setq current-answer (gethash current-kana kana-table))
          (setq current-guess-number 0)
          (princ (format "What is the meaning of %s\n" current-kana) *output*)
          (princ
           (catch 'guess
             (while t
               (setq current-guess (funcall *read-fun*))
               (if (equal current-guess current-answer)
                   (throw 'guess "Correct!\n")
                 (incf current-guess-number)
                 (if (or (>= current-guess-number 3) (equal current-guess ""))
                     (throw 'guess (format "the answer was %s\n" 
                                           current-answer)))
                 (princ "Incorrect, guess again.\n")))) *output* ))
      (when script? (terpri) (kill-emacs)))))
(defun kana-test-emacs ()
  (with-temp-buffer
    (switch-to-buffer (current-buffer))
    (kana-test-simple)))
(when 
    script?
  (kana-test-emacs))
;; (#x3041 . "ぁ")(#x3042 . "あ") (#x30a1 . "ァ")(#x30a2 . "ア")
;; (#x3043 . "ぃ")(#x3044 . "い") (#x30a3 . "ィ")(#x30a4 . "イ")
;; (#x3045 . "ぅ")(#x3046 . "う") (#x30a5 . "ゥ")(#x30a6 . "ウ")
;; (#x3047 . "ぇ")(#x3048 . "え") (#x30a7 . "ェ")(#x30a8 . "エ")
;; (#x3049 . "ぉ")(#x304a . "お") (#x30a9 . "ォ")(#x30aa . "オ")
;; (#x304b . "か")(#x304c . "が") (#x30ab . "カ")(#x30ac . "ガ")
;; (#x304d . "き")(#x304e . "ぎ") (#x30ad . "キ")(#x30ae . "ギ")
;; (#x304f . "く")(#x3050 . "ぐ") (#x30af . "ク")(#x30b0 . "グ")
;; (#x3051 . "け")(#x3052 . "げ") (#x30b1 . "ケ")(#x30b2 . "ゲ")
;; (#x3053 . "こ")(#x3054 . "ご") (#x30b3 . "コ")(#x30b4 . "ゴ")

;; (#x3055 . "さ")(#x3056 . "ざ") (#x30b5 . "サ")(#x30b6 . "ザ")
;; (#x3057 . "し")(#x3058 . "じ") (#x30b7 . "シ")(#x30b8 . "ジ")
;; (#x3059 . "す")(#x305a . "ず") (#x30b9 . "ス")(#x30ba . "ズ")
;; (#x305b . "せ")(#x305c . "ぜ") (#x30bb . "セ")(#x30bc . "ゼ")
;; (#x305d . "そ")(#x305e . "ぞ") (#x30bd . "ソ")(#x30be . "ゾ")

;; (#x305f . "た")(#x3060 . "だ") (#x30bf . "タ")(#x30c0 . "ダ")
;; (#x3061 . "ち")(#x3062 . "ぢ") (#x30c1 . "チ")(#x30c2 . "ヂ")
;; (#x3063 . "っ")(#x3064 . "つ")(#x3065 . "づ") (#x30c3 . "ッ")(#x30c4 . "ツ")(#x30c5 . "ヅ")
;; (#x3066 . "て")(#x3067 . "で") (#x30c6 . "テ")(#x30c7 . "デ")
;; (#x3068 . "と")(#x3069 . "ど") (#x30c8 . "ト")(#x30c9 . "ド")

;; (#x306a . "な") (#x30ca . "ナ")
;; (#x306b . "に") (#x30cb . "ニ")
;; (#x306c . "ぬ") (#x30cc . "ヌ")
;; (#x306d . "ね") (#x30cd . "ネ")
;; (#x306e . "の") (#x30ce . "ノ")

;; (#x306f . "は")(#x3070 . "ば")(#x3071 . "ぱ") (#x30cf . "ハ")(#x30d0 . "バ")(#x30d1 . "パ")
;; (#x3072 . "ひ")(#x3073 . "び")(#x3074 . "ぴ") (#x30d2 . "ヒ")(#x30d3 . "ビ")(#x30d4 . "ピ")
;; (#x3075 . "ふ")(#x3076 . "ぶ")(#x3077 . "ぷ") (#x30d5 . "フ")(#x30d6 . "ブ")(#x30d7 . "プ")
;; (#x3078 . "へ")(#x3079 . "べ")(#x307a . "ぺ") (#x30d8 . "ヘ")(#x30d9 . "ベ")(#x30da . "ペ")
;; (#x307b . "ほ")(#x307c . "ぼ")(#x307d . "ぽ") (#x30db . "ホ")(#x30dc . "ボ")(#x30dd . "ポ")

;; (#x307e . "ま") (#x30de . "マ")
;; (#x307f . "み") (#x30df . "ミ")
;; (#x3080 . "む") (#x30e0 . "ム")
;; (#x3081 . "め") (#x30e1 . "メ")
;; (#x3082 . "も") (#x30e2 . "モ")

;; (#x3083 . "ゃ")(#x3084 . "や") (#x30e3 . "ャ")(#x30e4 . "ヤ")
;; (#x3085 . "ゅ")(#x3086 . "ゆ") (#x30e5 . "ュ")(#x30e6 . "ユ")
;; (#x3087 . "ょ")(#x3088 . "よ") (#x30e7 . "ョ")(#x30e8 . "ヨ")

;; (#x3089 . "ら") (#x30e9 . "ラ")
;; (#x308a . "り") (#x30ea . "リ")
;; (#x308b . "る") (#x30eb . "ル")
;; (#x308c . "れ") (#x30ec . "レ")
;; (#x308d . "ろ") (#x30ed . "ロ")

;; (#x308e . "ゎ")(#x308f . "わ") (#x30ee . "ヮ")(#x30ef . "ワ")
;; (#x3090 . "ゐ") (#x30f0 . "ヰ")
;; (#x3091 . "ゑ") (#x30f1 . "ヱ")
;; (#x3092 . "を") (#x30f2 . "ヲ")
;; (#x3093 . "ん") (#x30f3 . "ン")
